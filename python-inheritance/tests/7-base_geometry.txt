The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------
This is an example text file in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry`` module:

class BaseGeometry:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
   
    >>> bg = BaseGeometry()

    >>> bg.integer_validator("my_int", 12)

    >>> bg.integer_validator("width", 89)

    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0
    """

    def area(self):
        """
        Not implemented

        >>> bg = BaseGeometry()
        >>> bg.area()
        Traceback (most recent call last):
            ...
        Exception: area() is not implemented
        """
        raise Exception("area() is not implemented")

    def integer_validator(self, name, value):
        """
        Validates a value

        >>> bg = BaseGeometry()
        >>> bg.integer_validator("my_int", 12)
        
        >>> bg.integer_validator("width", 89)

        >>> bg.integer_validator("name", "John")
        Traceback (most recent call last):
            ...
        TypeError: name must be an integer

        >>> bg.integer_validator("age", 0)
        Traceback (most recent call last):
            ...
        ValueError: age must be greater than 0

        >>> bg.integer_validator("distance", -4)
        Traceback (most recent call last):
            ...
        ValueError: distance must be greater than 0
        """